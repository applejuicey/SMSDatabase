type Query {
    getUserById(userId: ID!): User
    getUserByEmail(email: String!): User
    getCompoundById(compoundId: ID!): Compound
    getCompoundsByMSPositiveParentValue(positiveParentValue: Float!): [Compound!]!
}



enum RoleType {
    ROOT,
    ADMIN,
    USER
}

type User {
    id: ID!
    name: String
    email: String!
    password: String!
    role: RoleType!
}

type Compound {
    id: ID!
    commonName: String!
    casCode: String
    pubChemCID: String
    chemSpiderID: String
    smiles: String!
    chemicalFormula: String
    positiveMSData: PositiveMSData
    negativeMSData: NegativeMSData
    saponinsSource: SaponinsSource
}

type PositiveMSData {
    id: ID!
    parentValue: Float!
    fragmentsValues: [Float!]!
    dataSource: String
    referenceCodes: [String!]!
}

type NegativeMSData {
    id: ID!
    parentValue: Float!
    fragmentsValues: [Float!]!
    dataSource: String
    referenceCodes: [String!]!
}

type SaponinsSource {
    id: ID!
    sourceCodes: [String!]!
}